import java.util.concurrent.TimeUnit

buildscript {
    ext.kotlin_version = '1.3.10'

    repositories {
        jcenter()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:0.0.37"
    }
}


group = 'org.jetbrains.kotlin.example'
version = '0.0.1-SNAPSHOT'

apply plugin: 'kotlin2js'
//apply plugin: 'org.jetbrains.kotlin.frontend'

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version" // for now only compile configuration is supported
}

//kotlinFrontend {
//    downloadNodeJsVersion = "latest"
//
//    npm {
//        dependency "style-loader"
//
//        devDependency("karma")
//        devDependency("vue-template-compiler")
//
//        dependency("vue", "*")
//        devDependency("css-loader", "*")
//        devDependency("style-loader", "*")
//        devDependency("vue-loader", "*")
//        devDependency("vue-hot-reload-api", "*")
//        devDependency("vue-html-loader", "*")
//    }
//
//    webpackBundle {
//        bundleName = "main"
//        contentPath = file('src/main/web')
//        webpackConfigFile = project.projectDir.path + '/webpack.config.js'
//    }
//}

compileKotlin2Js {
    kotlinOptions.metaInfo = false
    kotlinOptions.outputFile = "kotlin_build/${project.name}.js"
    kotlinOptions.sourceMap = true
    kotlinOptions.moduleKind = 'commonjs'
    kotlinOptions.main = "call"
}

compileTestKotlin2Js {
    kotlinOptions.metaInfo = false
    kotlinOptions.outputFile = "kotlin_build/js-tests/${project.name}-tests.js"
    kotlinOptions.sourceMap = true
    kotlinOptions.moduleKind = 'commonjs'
//    kotlinOptions.moduleName = project.name + "-test"
    kotlinOptions.main = "call"
}

// Log timings per task.
class TimingsListener implements TaskExecutionListener, BuildListener {
    private long startTime
    private timings = []

    @Override
    void beforeExecute(Task task) {
        startTime = System.nanoTime()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);
        timings.add([ms, task.path])
        task.project.logger.warn "${task.path} took ${ms}ms"
    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task timings:"
        for (timing in timings) {
            if (timing[0] >= 50) {
                printf "%7sms  %s\n", timing
            }
        }
    }

    @Override
    void buildStarted(Gradle gradle) {}

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}
}

gradle.addListener new TimingsListener()